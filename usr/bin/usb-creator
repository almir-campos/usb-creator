#!/bin/bash

# Script to make a multi-boot USB stick
# Arjen Balfoort, 20-10-2016
# Dependencies: grub-efi-amd64-bin, grub-efi-ia32-bin, grub-pc-bin, grub2-common, rsync, dosfstools, udisks2, psmisc, util-linux, parted, coreutils

# exit codes
# 0 - All's well
# 1 - Run as root
# 2 - Invalid argument (see log file)
# 3 - Device not found or no device given
# 4 - Given ISO path not found
# 5 - Device in use
# 6 - Unable to mount device
# 7 - sha256sum mismatch
# 8 - Not a fat32 filesystem
# 9 - Missing bootloader
# 10 - Not enough space on device
# 11 - Cannot guess distribution from ISO name


GUISTART='/usr/lib/usb-creator/main.py'
FILESDIR="/usr/share/usb-creator/files"

# ================================================================
# Distributions families
# Source: http://distrowatch.com/search.php   select: "Based on"
# ================================================================
UBUNTUDISTROS='untu,aurora,mint,asturix,backbox,bio,bodhi,deepin,peasy,sense,joli,linuxgfx,kuki,linuxmce,netrunner,peppermint,pinguy,poseidon,puredyne,qimo,startos,trisquel,uberstudent,remix,ultimate,vinux,zentyal,zeven,lxle,zorin,elementary,lite,chromixium,mangaka,watt,voyager,kylin,extix,emma,chalet,caine,symphony,superx,artisx,bella,apodio,luninux,remnux,lliurex,leeenux,kxstudio,peach,deft,salent,caelinux,madbox,nova,baltix,bardinux,lunuxfx,greenie,centrych,caixa,openlx,guadalinex,max,ulteo,karoshi,nexenta,chitwanix,track,bll,lab'
DEBIANDISTROS='debian,mini,kali,antix,steamos,q4os,tails,robo,sparky,makulu,tanglu,zilla,handy,neptune,semplice,gparted,solyd,parsix,elive,avlinux,univention,siduction,turnkey,point,galpon,proxmox,openmedia,2xos,webconverger,finnix,blankon,linuxbbq,untangle,boss,pardus,musix,rebellin,kanotix,gnewsense,matriux,skole,exe,vyos,kwheezy,doudou,window,parrot,canaima,volumio,selks,osmc,grml,pelicanhpc,linex,omoikane,catix,lmde,mx'
ARCHDISTROS='arch,manjaro,antergos,chakra,blackarch,bridge,parabola,poliarch,kademar,linhes,kaos'
PUPPYDISTROS='puppy,simplicity,legacy,toutou,quirky'
KNOPPIXDISTROS='knoppix,overclockix'
CENTOSDISTROS='centos,baruwa,sme,asterisknow,stella,elastix,rockstor'
FEDORADISTROS='fedora,korora,qubes,nst,linpus,blag,vortexbox,chapeau,hanthana,xange,olpc,sulix,ojuba'
SUSEDISTROS='suse,netsecl'
GENTOODISTROS='gentoo,sabayon,calculate,rescue,kiosk,funtoo,pentoo,exherbo,bicom'
SLACKDISTROS='slack,vector,vl,absolute,salix,wifislax,porteus,slackel,connochaet,austrumi,zenwalk,plamo,superb'
MANDRIVADISTROS='mandriva,mageia,blackpanther,unity'
INDEPENDENTDISTROS='pclinux,solus,4mlinux,magic'


# ================================================================
# Distribution Grub2 menu lines
# Adapt write_grub_menu function below "Make distro specific menu"
# Source: https://wiki.archlinux.org/index.php/Multiboot_USB_drive
# ================================================================

# ================================================================
# Ubuntu 
# ================================================================
# vmlinuz.efi is set to vmlinuz for 32-bit ISOs in write_grub_menu
UBUNTU_LINUX='linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=$isofile noprompt noeject quiet splash'
UBUNTU_INITRD='initrd (loop)/casper/initrd.lz'
# Lite
LITE_INITRD='initrd (loop)/casper/initrd.gz'

# ================================================================
# Debian 
# ================================================================
DEBIAN_LINUX='linux (loop)/live/vmlinuz boot=live findiso=$isofile noprompt noeject noswap config quiet splash'
DEBIAN_INITRD='initrd (loop)/live/initrd.img'
# NOT TESTED
# We need to download the initrd for the not live DVD.
# This is done with wget in write_grub_menu
DEBIANREG_LINUX='linux (loop)/install.amd/vmlinuz iso-scan/ask_second_pass=true iso-scan/filename=$isofile quiet'
DEBIANREG_INITRD='initrd $isofile.initrd.gz'
# Debian mini iso
DEBIANMINI_LINUX='linux (loop)/linux'
DEBIANMINI_INITRD='initrd (loop)/initrd.gz'
# Antix
ANTIX_LINUX='linux (loop)/antiX/vmlinuz fromiso=$isofile antiX=MLX'
ANTIX_INITRD='initrd (loop)/antiX/initrd.gz'
# CloneZilla
CLONEZILLA_LINUX='linux (loop)/live/vmlinuz findiso=$isofile boot=live union=overlay username=user config quiet'
# GParted
GPARTED_LINUX='linux (loop)/live/vmlinuz boot=live findiso=$isofile union=overlay username=user config components noswap noeject toram=filesystem.squashfs ip=  quiet nosplash'
# Kali
KALI_LINUX='linux (loop)/live/vmlinuz boot=live findiso=$isofile noconfig=sudo username=root hostname=kali quiet splash'

# ================================================================
# Arch 
# ================================================================
ARCHDUAL_LINUX='linux (loop)/arch/boot/x86_64/vmlinuz archisodevice=/dev/loop0 img_dev=$imgdevpath img_loop=$isofile quiet'
ARCHDUAL_INITRD='initrd (loop)/arch/boot/x86_64/archiso.img'
ARCHBOOT_LINUX='linux (loop)/boot/vmlinuz_x86_64 iso_loop_dev=$imgdevpath iso_loop_path=$isofile quiet'
ARCHBOOT_INITRD='initrd (loop)/boot/initramfs_x86_64.img'
# Manjaro
# misolabel is replaced in write_grub_menu
# Source = https://forum.manjaro.org/index.php?PHPSESSID=8npqcb42p5i5nhste1bbv30sk0&topic=14051.msg169258#msg169258
MANJARO_LINUX='linux (loop)/manjaro/boot/x86_64/manjaro img_dev=UUID=$rootuuid img_loop=$isofile misobasedir=manjaro misolabel nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=nonfree nonfree=yes quiet'
MANJARO_INITRD='initrd (loop)/manjaro/boot/x86_64/manjaro.img'
# KaOS
KAOS_LINUX='linux (loop)/kdeos/boot/x86_64/kdeosiso kdeosisolabel=$usblabel showopts nonfree=no xdriver=no i915.modeset=1 nouveau.modeset=1 radeon.modeset=1 systemd.show_status=0'
KAOS_INITRD='initrd (loop)/kdeos/boot/x86_64/kdeosiso.img'
# Netrunner
NETRUNNER_LINUX='linux (loop)/netrunner/boot/x86_64/netrunner img_dev=UUID=$rootuuid img_loop=$isofile misobasedir=netrunner misolabel nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=free quiet splash showopts'
NETRUNNER_INITRD='initrd (loop)/netrunner/boot/x86_64/netrunner.img'
# Antergos
ANTERGOS_LINUX='linux (loop)/arch/boot/vmlinuz img_dev=UUID=$rootuuid img_loop=$isofile archisobasedir=arch archisolabel earlymodules=loop modules-load=loop rd.modules-load=loop udev.log-priority=crit rd.udev.log-priority=crit quiet splash'
ANTERGOS_INITRD='initrd (loop)/arch/boot/archiso.img'

# ================================================================
# Puppy 
# ================================================================
PUPPY_LINUX='linux (loop)/vmlinuz boot=live config findiso=$isofile'
PUPPY_INITRD='initrd (loop)/initrd.q'
# Simplicity
# NO WORKY
SIMPLICITY_INITRD='initrd (loop)/initrd.gz'

# ================================================================
# Knoppix 
# ================================================================
KNOPPIX_LINUX='linux (loop)/boot/isolinux/linux bootfrom=/mnt-iso/$isofile acpi=off quiet keyboard=us lang=us'
KNOPPIX_INITRD='initrd (loop)/boot/isolinux/minirt.gz'

# ================================================================
# CentOS 
# ================================================================
# NO WORKY: ends in a black screen
#CENTOS_LINUX='linux (loop)/isolinux/vmlinuz noeject inst.stage2=hd:UUID=$rootuuid findiso=$isofile quiet'
CENTOS_LINUX='linux (loop)/isolinux/vmlinuz noeject inst.stage2=hd:LABEL=$usblabel:/$isofile quiet'
CENTOS_INITRD='initrd (loop)/isolinux/initrd.img'
#CENTOSLIVE_LINUX='linux (loop)/isolinux/vmlinuz0 root=live:UUID=$rootuuid iso-scan/filename=$isofile rd.live.image quiet'
CENTOSLIVE_LINUX='linux (loop)/isolinux/vmlinuz0 root=live:LABEL=$usblabel iso-scan/filename=$isofile rd.live.image quiet'
CENTOSLIVE_INITRD='initrd (loop)/isolinux/initrd0.img'

# ================================================================
# Fedora 
# ================================================================
FEDORA_LINUX='linux (loop)/isolinux/vmlinuz inst.stage2=hd:UUID=$rootuuid findiso=$isofile noeject quiet'
FEDORA_INITRD='initrd (loop)/isolinux/initrd.img'
# NO WORKY: hangs on "Reached target Basic System"
#FEDORALIVE_LINUX='linux (loop)/isolinux/vmlinuz0 root=live:UUID=$rootuuid findiso=$isofile rootfstype=auto ro rd.live.image quiet rhgb rd.luks=0 rd.md=0 rd.dm=0'
FEDORALIVE_LINUX='linux (loop)/isolinux/vmlinuz0 boot=isolinux iso-scan/filename=$isofile root=live:LABEL=$usblabel ro rd.live.image quiet rhgb'
#FEDORALIVE_LINUX='linux (loop)/isolinux/vmlinuz0 root=live:CDLABEL=$usblabel findiso=$isofile rootfstype=auto ro rd.live.image quiet rhgb rd.luks=0 rd.md=0 rd.dm=0'
FEDORALIVE_INITRD='initrd (loop)/isolinux/initrd0.img'

# ================================================================
# Suse 
# ================================================================
SUSE_LINUX='linux (loop)/boot/x86_64/loader/linux install=hd:$isofile quiet'
SUSE_INITRD='initrd (loop)/boot/x86_64/loader/initrd'
SUSELIVE_LINUX='linux (loop)/boot/x86_64/loader/linux isofrom_device=$imgdevpath isofrom_system=$isofile LANG=en_US.UTF-8 quiet'

# ================================================================
# Gentoo 
# ================================================================
GENTOO_LINUX='linux (loop)/isolinux/gentoo root=/dev/ram0 init=/linuxrc aufs looptype=squashfs loop=/image.squashfs cdroot isoboot=$isofile quiet splash=silent,theme:default console=tty0'
GENTOO_INITRD='initrd (loop)/isolinux/gentoo.igz'
# Sabayon
SABAYON_LINUX='linux (loop)/boot/sabayon root=/dev/ram0 aufs cdroot locale=en_US loop=/livecd.squashfs looptype=squashfs isoboot=$isofile'
SABAYON_INITRD='initrd (loop)/boot/sabayon.igz'
# SystemRescue
SYSRESCUE_LINUX='linux (loop)/isolinux/rescue64 isoloop=$isofile setkmap=us docache dostartx quiet'
SYSRESCUE_INITRD='initrd (loop)/isolinux/initram.igz'

# ================================================================
# SlackWare 
# ================================================================
SLACK_LINUX='linux (loop)/kernels/huge.s/bzImage load_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 SLACK_KERNEL=huge.s'
SLACK_INITRD='initrd (loop)/isolinux/initrd.img'
# Vector
VECTOR_LINUX='linux (loop)/isolinux/kernel/sata GUI splash load_ramdisk=1 prompt_ramdisk=0 rw root=/dev/ram nomodeset'
VECTOR_INITRD='initrd (loop)/isolinux/init.lz'

# ================================================================
# Mandriva 
# ================================================================
# Source (German): https://forums.mageia.org/de/viewtopic.php?f=8&t=1713
MAGEIA_LINUX='linux (loop)/isolinux/x86_64/vmlinuz from=$isofile ro rd.luks=0 rd.lvm=0 rd.md=0 rd.dm=0 xmode=800x600 xrandr quiet'
MAGEIA_INITRD='initrd (loop)/isolinux/x86_64/all.rdz'
# NO WORKY: unable to read squashfs_super_block: https://bugs.mageia.org/show_bug.cgi?id=1506
# NO WORKY: need label of USB, not of ISO or UUID (iso iso9660 does not support UUID): is set in write_grub_menu
MAGEIALIVE_LINUX='linux (loop)/boot/vmlinuz root=mgalive:LABEL=$usblabel splash quiet noiswmd rd.luks=0 rd.lvm=0 rd.md=0 rd.dm=0 vga=788'
MAGEIALIVE_INITRD='initrd (loop)/boot/cdrom/initrd.gz'

# ================================================================
# Independent 
# ================================================================
# PClinuxOS
PCLINUX_LINUX='linux (loop)/isolinux/vmlinuz fromusb root=UUID=$rootuuid bootfromiso=$isofile livecd=livecd apci=on splash=silent fstab=rw,noauto unionfs toram'
PCLINUX_INITRD='initrd (loop)/isolinux/initrd.gz'
# SolusOS 
# NO WORKY
SOLUS_LINUX='linux (loop)/boot/kernel root=live:LABEL=$usblabel iso-scan/filename=$isofile'
SOLUS_INITRD='initrd (loop)/boot/initrd.img'
# 4MLinux
FOURMLINUX_LINUX='linux (loop)/boot/bzImage iso-scan/filename=$isofile root=/dev/ram0 vga=normal'
FOURMLINUX_INITRD='initrd (loop)/boot/initrd.gz'
# PartedMagic 
PMAGIC_LINUX='linux (loop)/pmagic/bzImage findiso=$isofile boot=live quiet'
PMAGIC_INITRD='initrd (loop)/pmagic/initrd.img'

# ================================================================
# ================================================================

# Pure distro USB (see write_grub_menu)
SOLYDXK=false


# Create menu lines for 32 bit isos
function create_32_bit_lines() {
  if [[ "$1" =~ i*[3456]86 ]] || [[ "$ISO" =~ [-_\.[:space:]]32[-_\.[:space:]b] ]]; then
    if [ "$2" != "" ]; then
      LINUX_LINE=$(echo $LINUX_LINE | sed "s/x86_64/$2/")
      INITRD_LINE=$(echo $INITRD_LINE | sed "s/x86_64/$2/")
    fi
    LINUX_LINE=$(echo $LINUX_LINE | sed 's/vmlinuz.efi/vmlinuz/')
  fi
}

# Check distributions
function check_distros() {
  RET=''
  LOWERISONAME=$1
  LIST=$2
  while IFS=',' read -ra ADDR; do
    for DISTRO in "${ADDR[@]}"; do
      if [[ "$LOWERISONAME" =~ "$DISTRO" ]]; then
        RET="$DISTRO"
        break
      fi
    done
    if [ "$RET" != "" ]; then
      break
    fi
  done <<< "$LIST"
  echo $RET
}

# Write a grub menu for each ISO
function write_grub_menu() {
  GRUBDIR=$1
  ISO=$2
  ISONAME=$(basename "$ISO")
  LOWERISONAME=$(basename "$ISO" | tr '[:upper:]' '[:lower:]')
  
  # Pure distro USB check
  if [[ "$LOWERISONAME" =~ "solyd" ]]; then
    SOLYDXK=true
  else
    SOLYDXK=false
  fi

  # ================================================================
  # Make distro specific menu
  # Find out which distro of that family we have and set the family name
  # ================================================================
  FAMILY="ubuntu"
  DISTRO=$(check_distros $LOWERISONAME $UBUNTUDISTROS)
  
  DEBIAN=$(check_distros $LOWERISONAME $DEBIANDISTROS)
  if [ "${#DEBIAN}" -gt "${#DISTRO}" ]; then
    DISTRO=$DEBIAN
    FAMILY="debian"
  fi
  
  ARCH=$(check_distros $LOWERISONAME $ARCHDISTROS)
  if [ "${#ARCH}" -gt "${#DISTRO}" ]; then
    DISTRO=$ARCH
    FAMILY="arch"
  fi
  
  PUPPY=$(check_distros $LOWERISONAME $PUPPYDISTROS)
  if [ "${#PUPPY}" -gt "${#DISTRO}" ]; then
    DISTRO=$PUPPY
    FAMILY="puppy"
  fi
  
  KNOPPIX=$(check_distros $LOWERISONAME $KNOPPIXDISTROS)
  if [ "${#KNOPPIX}" -gt "${#DISTRO}" ]; then
    DISTRO=$KNOPPIX
    FAMILY="knoppix"
  fi
  
  CENTOS=$(check_distros $LOWERISONAME $CENTOSDISTROS)
  if [ "${#CENTOS}" -gt "${#DISTRO}" ]; then
    DISTRO=$CENTOS
    FAMILY="centos"
  fi
  
  FEDORA=$(check_distros $LOWERISONAME $FEDORADISTROS)
  if [ "${#FEDORA}" -gt "${#DISTRO}" ]; then
    DISTRO=$FEDORA
    FAMILY="fedora"
  fi
  
  SUSE=$(check_distros $LOWERISONAME $SUSEDISTROS)
  if [ "${#SUSE}" -gt "${#DISTRO}" ]; then
    DISTRO=$SUSE
    FAMILY="suse"
  fi
  
  GENTOO=$(check_distros $LOWERISONAME $GENTOODISTROS)
  if [ "${#GENTOO}" -gt "${#DISTRO}" ]; then
    DISTRO=$GENTOO
    FAMILY="gentoo"
  fi
  
  SLACK=$(check_distros $LOWERISONAME $SLACKDISTROS)
  if [ "${#SLACK}" -gt "${#DISTRO}" ]; then
    DISTRO=$SLACK
    FAMILY="slack"
  fi
  
  MANDRIVA=$(check_distros $LOWERISONAME $MANDRIVADISTROS)
  if [ "${#MANDRIVA}" -gt "${#DISTRO}" ]; then
    DISTRO=$MANDRIVA
    FAMILY="mandriva"
  fi
  
  INDEPENDENT=$(check_distros $LOWERISONAME $INDEPENDENTDISTROS)
  if [ "${#INDEPENDENT}" -gt "${#DISTRO}" ]; then
    DISTRO=$INDEPENDENT
    FAMILY="independent"
  fi
  
  if [ "$DISTRO" == "" ]; then
    FAMILY=""
  fi
  
  echo "Family/distro of $ISONAME = $FAMILY/$DISTRO" | tee -a "$LOG"
  
  case $FAMILY in
      ubuntu)
        # Ubuntu distributions
        LINUX_LINE=$UBUNTU_LINUX
        INITRD_LINE=$UBUNTU_INITRD
        if [ "$DISTRO" == "lite" ] ||
          [ "$DISTRO" == "chromixium" ]; then
          INITRD_LINE=$LITE_INITRD
        elif [ "$DISTRO" == "bll" ] ||
            [ "$DISTRO" == "lab" ] ||
            [ "$DISTRO" == "watt" ] ||
            [ "$DISTRO" == "mangaka" ]; then
            LINUX_LINE=$(echo $UBUNTU_LINUX | sed 's/vmlinuz.efi/vmlinuz/')
            INITRD_LINE=$LITE_INITRD
        elif [ "$DISTRO" == "ultimate" ]; then
            LINUX_LINE=$(echo $UBUNTU_LINUX | sed 's/vmlinuz.efi/vmlinuz/')
        elif [ "$DISTRO" == "netrunner" ] && [[ "$LOWERISONAME" =~ "roll" ]]; then
          MISOLABEL=$(env LANG=C isoinfo -d -i $ISO | grep 'Volume id:' | awk '{print $3}')
          LINUX_LINE=$(echo $NETRUNNER_LINUX | sed "s/misolabel/misolabel=$MISOLABEL/")
          INITRD_LINE=$NETRUNNER_INITRD
        fi
        create_32_bit_lines $LOWERISONAME 'i686'
        ;;
  
      debian)
        # Debian distributions
        LINUX_LINE=$DEBIAN_LINUX
        INITRD_LINE=$DEBIAN_INITRD
        if [ "$DISTRO" == "debian" ] && [[ ! "$LOWERISONAME" =~ "live" ]]; then
          wget "https://mirrors.kernel.org/debian/dists/stable/main/installer-amd64/current/images/hd-media/initrd.gz" -O $ISO.initrd.gz
          LINUX_LINE=$DEBIANREG_LINUX
          INITRD_LINE=$DEBIANREG_INITRD
        elif [ "$DISTRO" == "mini" ]; then
          LINUX_LINE=$DEBIANMINI_LINUX
          INITRD_LINE=$DEBIANMINI_INITRD
        elif [ "$DISTRO" == "lmde" ]; then
          INITRD_LINE=$(echo $INITRD_LINE | sed 's/img/lz/')
        elif [ "$DISTRO" == "antix" ] || [[ "$LOWERISONAME" =~ "mx" ]]; then
          LINUX_LINE=$ANTIX_LINUX
          INITRD_LINE=$ANTIX_INITRD
        elif [ "$DISTRO" == "kali" ]; then
          LINUX_LINE=$KALI_LINUX
        elif [ "$DISTRO" == "zilla" ]; then
          LINUX_LINE=$CLONEZILLA_LINUX
        elif [ "$DISTRO" == "gparted" ]; then
          LINUX_LINE=$GPARTED_LINUX
        fi
        ;;
  
      arch)
        # Arch distributions
        LINUX_LINE=$ARCHDUAL_LINUX
        INITRD_LINE=$ARCHDUAL_INITRD
        if [[ "$LOWERISONAME" =~ "archboot" ]]; then
          LINUX_LINE=$ARCHBOOT_LINUX
          INITRD_LINE=$ARCHBOOT_INITRD
        elif [ "$DISTRO" == "kaos" ]; then
          LINUX_LINE=$KAOS_LINUX
          INITRD_LINE=$KAOS_INITRD
          create_32_bit_lines $LOWERISONAME 'i686'
        elif [ "$DISTRO" == "manjaro" ]; then
          MISOLABEL=$(env LANG=C isoinfo -d -i $ISO | grep 'Volume id:' | awk '{print $3}')
          LINUX_LINE=$(echo $MANJARO_LINUX | sed "s/misolabel/misolabel=$MISOLABEL/")
          INITRD_LINE=$MANJARO_INITRD
          create_32_bit_lines $LOWERISONAME 'i686'
        elif [ "$DISTRO" == "antergos" ]; then
          ARCHISOLABEL=$(env LANG=C isoinfo -d -i $ISO | grep 'Volume id:' | awk '{print $3}')
          LINUX_LINE=$(echo $ANTERGOS_LINUX | sed "s/archisolabel/archisolabel=$ARCHISOLABEL/")
          INITRD_LINE=$ANTERGOS_INITRD
        fi
        ;;
  
      puppy)
        # Puppy distributions
        LINUX_LINE=$PUPPY_LINUX
        INITRD_LINE=$PUPPY_INITRD
        if [ "$DISTRO" == "simplicity" ]; then
          INITRD_LINE=$SIMPLICITY_INITRD
        fi
        ;;
      
      knoppix)
        # Knoppix distributions
        LINUX_LINE=$KNOPPIX_LINUX
        INITRD_LINE=$KNOPPIX_INITRD
        ;;
      
      centos)
        # Centos distributions
        LINUX_LINE=$CENTOS_LINUX
        INITRD_LINE=$CENTOS_INITRD
        if [[ "$LOWERISONAME" =~ "live" ]]; then
          LINUX_LINE=$CENTOSLIVE_LINUX
          INITRD_LINE=$CENTOSLIVE_INITRD
        fi
        ;;
      
      fedora)
        # Fedora distributions
        LINUX_LINE=$FEDORA_LINUX
        INITRD_LINE=$FEDORA_INITRD
        if [[ "$LOWERISONAME" =~ "live" ]]; then
          LINUX_LINE=$FEDORALIVE_LINUX
          INITRD_LINE=$FEDORALIVE_INITRD
        fi
        ;;
      
      suse)
        # openSuse distributions
        LINUX_LINE=$SUSE_LINUX
        INITRD_LINE=$SUSE_INITRD
        if [[ "$LOWERISONAME" =~ "live" ]]; then
          LINUX_LINE=$SUSELIVE_LINUX
        fi
        create_32_bit_lines $LOWERISONAME 'i386'
        ;;
      
      gentoo)
        # Gentoo distributions 
        LINUX_LINE=$GENTOO_LINUX
        INITRD_LINE=$GENTOO_INITRD
        if [ "$DISTRO" == "rescue" ]; then
          LINUX_LINE=$SYSRESCUE_LINUX
          INITRD_LINE=$SYSRESCUE_INITRD
        elif [ "$DISTRO" == "sabayon" ]; then
          LINUX_LINE=$SABAYON_LINUX
          INITRD_LINE=$SABAYON_INITRD
        fi
        ;;
      
      slack)
        # SlackWare distributions 
        LINUX_LINE=$SLACK_LINUX
        INITRD_LINE=$SLACK_INITRD
        if [ "$DISTRO" == "vector" ] || [ "$DISTRO" == "vl" ]; then
          LINUX_LINE=$VECTOR_LINUX
          INITRD_LINE=$VECTOR_INITRD
        fi
        ;;
      
      mandriva)
        # Mandriva distributions 
        LINUX_LINE=$MAGEIA_LINUX
        INITRD_LINE=$MAGEIA_INITRD
        if [ "$DISTRO" == "mageia" ]; then
          if [[ "$LOWERISONAME" =~ "live" ]]; then
            #MAGEIA_LABEL=$(env LANG=C isoinfo -d -i $ISO | grep 'Volume id:' | awk '{print $3}')
            LINUX_LINE=$(echo $LINUX_LINE | sed "s/mgalive/mgalive:LABEL=$LABEL/")
            LINUX_LINE=$MAGEIALIVE_LINUX
            INITRD_LINE=$MAGEIALIVE_INITRD
          fi
          create_32_bit_lines $LOWERISONAME 'i586'
        fi
        ;;
      
      independent)
        # Independent distributions 
        # PClinuxOS
        if [ "$DISTRO" == "pclinux" ]; then
          LINUX_LINE=$PCLINUX_LINUX
          INITRD_LINE=$PCLINUX_INITRD
          
        # SolusOS
        elif [ "$DISTRO" == "solus" ]; then
          LINUX_LINE=$SOLUS_LINUX
          INITRD_LINE=$SOLUS_INITRD
          
        # 4MLinux
        elif [ "$DISTRO" == "4mlinux" ]; then
          LINUX_LINE=$FOURMLINUX_LINUX
          INITRD_LINE=$FOURMLINUX_INITRD
        
        # Parted magic
        elif [ "$DISTRO" == "magic" ]; then
          LINUX_LINE=$PMAGIC_LINUX
          INITRD_LINE=$PMAGIC_INITRD
        fi
        ;;
        
      *)
        echo "Could not guess distribution from ISO name: $ISONAME." | tee -a "$LOG"
        exit 11
        ;;
  esac
  
  # ================================================================
  # ================================================================
  
  if [ -d "$GRUBDIR" ]; then
    # Set menu title
    MENUTITLE=$(echo "$ISONAME" | sed -e 's/^[0-9]*[-_ .]*//' -e 's/x*86_64/64/' -e 's/[-_]/ /g' -e 's/bit/ /' -e 's/64/64-bit/' -e 's/i*[3456]86/32/' -e 's/32/32-bit/')
    # Uppercase first character
    MENUTITLE="${MENUTITLE^}"
    # Remove extension
    MENUTITLE="${MENUTITLE%.*}"
    
    MENU="menuentry '"$MENUTITLE"' {\n"
    MENU="$MENU  set isofile='/"$ISONAME"'\n"
    MENU="$MENU  insmod loopback\n"
    MENU="$MENU  loopback loop \$isofile\n"
    MENU="$MENU  $LINUX_LINE\n"
    MENU="$MENU  $INITRD_LINE\n"
    MENU="$MENU}\n"
    
    echo -e $MENU >> "$GRUBDIR/grub.cfg"
  fi
}

# Create user history file
LOGNAME=$(logname)
ISOHISTDIR=$(eval echo "~$LOGNAME/.usb-creator")
if [ ! -e "$ISOHISTDIR" ]; then
  OLDHISTDIR=$(eval echo "~$LOGNAME/usb-creator")
  if [ -e "$ISOHISTDIR" ]; then
    mv "$OLDHISTDIR" "$ISOHISTDIR"
  fi
  if [ ! -e "$ISOHISTDIR" ]; then
    mkdir -p "$ISOHISTDIR"
  fi
  chown -R $LOGNAME $ISOHISTDIR
fi
ISOHISTORY="$ISOHISTDIR/isohistory.txt"

function usage() {
  echo "=================================================================="
  echo "USB Creator Help:"
  echo "=================================================================="
  echo "-b                        Install the bootloaders."
  echo "-c                        Copy the content of the ISO to the USB."
  echo "                          This skips -f, -g, -l, -s, -r when passed."
  echo "-d /dev/device            Device path of the USB."
  echo "                          When omitted, the device is searched."
  echo "-f                        Format the device."
  echo "-g                        Configure Grub."
  echo "-h                        This screen."
  echo "-i \"/path/to/your.iso\"    The ISO to add to the device."
  echo "                          You can pass a directory and use wildcards."
  echo "-l \"LABEL\"                Set the label of the USB."
  echo "                          Default is: MULTIUSB"
  echo "-s -m                     sha256sum the ISOs."
  echo "                          If -i is not provided, $ISOHISTORY is used."
  echo "-r                        Repair the device."
  echo "                          With -f a deep scan is done."
  echo "-u                        Unmount when done."
  echo "--"
  echo "No parameters             Start the GUI if available"
  echo "=================================================================="
}

# Initialize grub.cfg
function init_grub() {
  GRUBDIR=$1
  if [ -d "$GRUBDIR" ]; then
    echo '''# Seconds to wait until starting the default menu entry
set timeout=10

# Default menu entry (0 = first)
set default=0

# set debug=all
set usblabel="LABEL"
search --no-floppy --set=root -l $usblabel
probe -u $root --set=rootuuid
set imgdevpath="/dev/disk/by-uuid/$rootuuid"

if loadfont $prefix/fonts/unicode.pf2 ; then
  set gfxmode=800x600
  insmod efi_gop
  insmod efi_uga
  insmod video_bochs
  insmod video_cirrus
  insmod gfxterm
  insmod png
  terminal_output gfxterm
fi

background_image -m stretch /boot/grub/grubbg.png
set menu_color_normal=white/black
set menu_color_highlight=dark-gray/white
''' | sed "s/LABEL/$LABEL/" > "$GRUBDIR/grub.cfg"
  fi
}

# Function called after rsync of ISO.
# Shows estimate kB left to copy to device
SYNCING=true
function wait_until_done() {
  STAT="/sys/block/$(basename $1)/stat"
  VAL=100
  while [ $VAL -gt 50 ] && $SYNCING; do
    if [ -e $STAT ]; then
      VAL=$(awk '{print $9}' $STAT)
      # Need the extra spaces to make sure the previous output is totally overwritten
      KB=$(grep -e Dirty: /proc/meminfo | awk '{print $2}')
      if [ -t 1 ]; then
        echo -ne "kB left to copy: $KB                     \\r"
      fi
      echo "kB left to copy: $KB" >> $LOG
      sleep 5
    else
      break
    fi
  done
}

function trim() {
  local var="$*"
  var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace characters
  var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace characters
  echo -n "$var"
}

# ================================================================
# End of functions
# ================================================================

if [ -z $1 ]; then
  # Without arguments: show GUI if available, else show help
  if [ -e "$GUISTART" ]; then
    APP="usb-creator"

    PYTHON=$(which python3)
    if [ "$PYTHON" == '' ]; then
      echo "Cannot find python3 executable - exiting"
      exit 0
    fi

    # Prepare for translations
    # https://www.gnu.org/software/gettext/manual/html_node/Preparing-Shell-Scripts.html
    . gettext.sh

    TEXTDOMAIN=$APP
    export TEXTDOMAIN
    TEXTDOMAINDIR=/usr/share/locale
    export TEXTDOMAINDIR

    # Get translations
    # Create pot: xgettext -o $APP.pot -L Shell --keyword=eval_gettext $APP
    MSG_ADM=$(eval_gettext "needs administrative privileges.")
    MSG_PWD=$(eval_gettext "Please enter your password.")
    MSG="<b>$APP</b> $MSG_ADM $MSG_PWD"

    optimize='OO'; case "$*" in *--debug*) unset optimize; esac
    CMD="$PYTHON -tt${optimize} "$GUISTART" $@"
    if [ -e "/usr/bin/kdesudo" ]; then
      ICON=$(get-app-theme-icon "$APP" 2>/dev/null)
      kdesudo -d -i "$ICON" --comment "$MSG" -c "$CMD"
    elif [ -e "/usr/bin/kdesu" ]; then
      ICON=$(get-app-theme-icon "$APP" 2>/dev/null)
      kdesu -i "$ICON" -c "$CMD"
    else
      gksudo --message "$MSG" "$CMD"
    fi
  else
    usage
    exit 0
  fi
else
  if [ $UID -ne 0 ]; then
    echo "Run as root."
    exit 1
  fi

  # Log file for traceback
  MAX_SIZE_KB=5120
  LOG_SIZE_KB=0
  LOG=/var/log/usb-creator.log
  LOG2=/var/log/usb-creator.log.1
  if [ -f "$LOG" ]; then
    LOG_SIZE_KB=$(ls -s "$LOG" | awk '{print $1}')
    if [ $LOG_SIZE_KB -gt $MAX_SIZE_KB ]; then
      mv -f "$LOG" "$LOG2"
    fi
  fi
  
  # Get parameters
  BOOT=false
  COPY=false
  DEVICE=''
  LABEL=''
  FORMAT=false
  GRUB=false
  ISOS=''
  SHA256SUM=false
  REPAIR=false
  UNMOUNT=false
  FAT=false
  MOUNT=''
    
  while getopts ":bcd:fghi:l:mrsu" opt; do
    case $opt in
      b)
        # Bootloader
        BOOT=true
        ;;
      c)
        # Bootloader
        COPY=true
        ;;
      d)
        # Device (remove trailing digits)
        DEVICE=$OPTARG
        ;;
      f)
        # Format
        FORMAT=true
        ;;
      g)
        # Grub
        GRUB=true
        ;;
      h)
        # Help
        usage
        exit 0
        ;;
      i)
        # ISOs
        ISOS=$OPTARG
        ;;
      l)
        # Label to upper case and without spaces
        LABEL=$(echo $OPTARG | tr '[:lower:]' '[:upper:]' | tr -d '[[:space:]]')
        ;;
      m)
        # SHA256SUM - backward compatibility
        SHA256SUM=true
        ;;
      r)
        # Repair
        REPAIR=true
        ;;
      s)
        # SHA256SUM
        SHA256SUM=true
        ;;
      u)
        # Unmount
        UNMOUNT=true
        ;;
      \?)
        echo "Invalid option: -$OPTARG"
        exit 2
        ;;
      :)
        echo "Option -$OPTARG requires an argument."
        exit 2
        ;;
      *)
        echo "Unknown error."
        usage
        exit 2
        ;;
    esac
  done
  
  echo "===========================================================" | tee -a "$LOG"
  echo "===============>>>>> Log session start <<<<<===============" | tee -a "$LOG"
  echo "===========================================================" | tee -a "$LOG"
  
  # Check for passed device
  if [ "$DEVICE" == "" ]; then
    # If running in terminal, search for detachable device
    if [ -t 1 ]; then
      DEVICES=$(ls /dev | egrep 'sd[a-z]$')
      for DEVNM in $DEVICES; do
        DETACHABLE=$(grep -h . /sys/block/$DEVNM/removable)
        if [ "$DETACHABLE" == "1" ]; then
          read -e -p "Confirm USB device: " -i /dev/$DEVNM DEVICE
          break
        fi
      done
    fi
  fi
  
  # Check the existence of the device
  if [ "$DEVICE" == "" ]; then
    echo "No device given."
    exit 3
  elif [ ! -e "$DEVICE" ]; then
    echo "$DEVICE does not exist."
    exit 3
  fi
  
  # Check the device if it's a pen drive
  DEVNM=$(basename $DEVICE)
  DETACHABLE=$(grep -h . /sys/block/$DEVNM/removable)
  if [ "$DETACHABLE" == "1" ]; then
    if ! $FORMAT; then
      PARTITION=$(ls /sys/block/$DEVNM | grep 1)
      if [ "$PARTITION" == "" ]; then
        FORMAT=true
      fi
    fi
  else
    echo "$DEVICE is not a detachable device."
    exit 3
  fi
   
  # Make sure the device is not in use and not mounted
  MOUNT=$(grep $DEVICE'1' /etc/mtab | awk '{print $2}' | sed 's/\\040/ /g')
  if [ "$MOUNT" != "" ]; then
    # Is it in use?
    FUSER=$(fuser -m "$MOUNT")
    if [ "$FUSER" != "" ]; then
      echo "$DEVICE is in use. Close any programs using the device." | tee -a "$LOG"
      exit 5
    else
      # Make sure the USB is not mounted
      udisksctl unmount -b $DEVICE'1' | tee -a "$LOG"
    fi
  fi
  
  # Set the label
  if ! $COPY; then
    if [ "$LABEL" == "" ]; then
      DEFLABEL='MULTIUSB'
      # Get the device's current label
      LABEL=$(blkid -s LABEL -o value $DEVICE'1')
      LABEL=$(trim $LABEL)
      # If not set: set default label name
      if [ "$LABEL" != "$DEFLABEL" ]; then
        LABEL=$DEFLABEL
        if ! $FORMAT; then
          # Make sure you set the label
          FATSTR=$(udisksctl info -b $DEVICE'1' | grep IdType | grep fat)
          if [ "$FATSTR" != "" ]; then
            echo "mtools_skip_check=1" > ~/.mtoolsrc
            mlabel ::"$LABEL" -i $DEVICE'1' | tee -a "$LOG"
            rm ~/.mtoolsrc
          else
            e2label $DEVICE'1' $LABEL | tee -a "$LOG"
          fi
        fi
      fi
    fi
    
    # Clean the device
    if $FORMAT; then
      # Clean USB
      echo "Clean USB..." | tee -a "$LOG"
      dd if=/dev/zero of=$DEVICE bs=1k count=2048 && sync | tee -a "$LOG"

      # Partition USB
      echo "Partitioning USB..." | tee -a "$LOG"
      parted -s $DEVICE mklabel msdos | tee -a "$LOG"
      parted -s $DEVICE mkpart primary fat32 4MiB 100% | tee -a "$LOG"
      parted -s $DEVICE align-check optimal 1 | tee -a "$LOG"
      parted -s $DEVICE toggle 1 boot | tee -a "$LOG"
      sleep 5
      udisksctl unmount -b $DEVICE'1' >/dev/null
      
      # Format the device
      BADBLOCKS=''
      if $REPAIR; then
        BADBLOCKS='-c'
      fi
      echo "mkfs.vfat -F 32 -v -I $BADBLOCKS -n \"$LABEL\" $DEVICE"'1' | tee -a "$LOG"
      mkfs.vfat -F 32 -v -I $BADBLOCKS -n "$LABEL" $DEVICE'1' | tee -a "$LOG"

      # Repair the partition
      if $REPAIR; then
        fsck.vfat -Vavt $DEVICE'1' | tee -a "$LOG"
        REPAIR=false
      fi
      
      echo
      echo "==================== Device Info ====================" | tee -a "$LOG"
      parted -s $DEVICE print | tee -a "$LOG"
      echo "=====================================================" | tee -a "$LOG"
      fsck.vfat $DEVICE'1' | tee -a "$LOG"
      echo "=====================================================" | tee -a "$LOG"
      echo
    fi

    # Is it a fat partition?
    FATSTR=$(udisksctl info -b  $DEVICE'1' | grep IdType | grep fat)
    if [ "$FATSTR" == "" ]; then
      echo "$DEVICE has no fat partition. Run with the -f parameter to format the device" | tee -a "$LOG"
      exit 8
    fi
  fi
  
  # Check if the ISO exists
  for ISO in $ISOS; do
    ISO=$(trim $ISO)
    if [ -d "$ISO" ]; then
      ISO=$(echo "$ISO" | sed 's/\/$//')
      ISOS=$(ls "$ISO/"*.iso)
      break
    elif [ ! -e "$ISO" ]; then
      echo "$ISO does not exist." | tee -a "$LOG"
      exit 4
    fi
  done
  
  if $COPY; then
    echo "Copy the contents of the ISO to the device..."
    for ISO in $ISOS; do
      dd if="$ISO" of=$DEVICE bs=4M && sync
      # Only dd first ISO
      break
    done
  else
    # Repair the device
    if $REPAIR; then
      fsck.vfat -a $DEVICE'1' | tee -a "$LOG"
    fi
    
    # Get the mount point
    MOUNT=$(grep $DEVICE'1' /etc/mtab | awk '{print $2}' | sed 's/\\040/ /g')
    if [ "$MOUNT" == "" ]; then
      echo "Mount $DEVICE" | tee -a "$LOG"
      udisksctl mount -b $DEVICE'1' | tee -a "$LOG"
      MOUNT=$(grep $DEVICE'1' /etc/mtab | awk '{print $2}' | sed 's/\\040/ /g')
    fi
    if [ "$MOUNT" == "" ]; then
      echo "$DEVICE could not be mounted. Mount it manually." | tee -a "$LOG"
      exit 6
    fi
    
    if ! $BOOT; then
      # Check if we need to install the bootloaders
      GRUBCHK=$(dd bs=512 count=1 if=$DEVICE 2>/dev/null | strings | grep GRUB)
      EFI=$(ls "$MOUNT"/EFI/BOOT/*.EFI 2>/dev/null)
      if [ "$GRUBCHK" == "" ] || [ "$EFI" == "" ] || [ ! -d "$MOUNT/boot/grub/" ]; then
        echo "Force bootlader installation." | tee -a "$LOG"
        BOOT=true
      fi
    fi
    
    if $BOOT; then
      # Install BIOS and EFI Grub on device
      echo "Installing i386 EFI..." | tee -a "$LOG"
      grub-install --removable --no-nvram --no-uefi-secure-boot --efi-directory="$MOUNT" --boot-directory="$MOUNT/boot" --target=i386-efi
      echo "Installing x86_64 EFI..." | tee -a "$LOG"
      grub-install --removable --no-nvram --no-uefi-secure-boot --efi-directory="$MOUNT" --boot-directory="$MOUNT/boot" --target=x86_64-efi
      echo "Installing legacy grub..." | tee -a "$LOG"
      grub-install --removable --no-floppy --boot-directory="$MOUNT/boot" --target=i386-pc $DEVICE

      # Check if there are ISOs on the USB
      if ! $GRUB; then
        USBISOS=$(find "$MOUNT" -type f -name "*.iso")
        if [ "$USBISOS" != "" ]; then
          echo "Force bootlader installation." | tee -a "$LOG"
          GRUB=true
        fi
      fi
    fi
    
    # Rsync the ISOs
    # Watch progress with:
    # watch -t -n1 'awk "{ print \$9 }" /sys/block/sdc/stat'
    # watch -t grep -e Dirty: /proc/meminfo
    for ISO in $ISOS; do
      ISONAME=$(basename "$ISO")
      if [ -e "$MOUNT/$ISONAME" ]; then
        rm -v "$MOUNT/$ISONAME" | tee -a "$LOG"
      fi
      ISOSIZE=$((`stat -c%s "$ISO"` / 1024))
      FREESIZE=$(df --output=avail $DEVICE'1' | awk 'NR==2')
      echo ">> ISOSIZE=$ISOSIZE | FREESIZE=$FREESIZE" | tee -a "$LOG"
      if [ $ISOSIZE -gt $FREESIZE ]; then
        echo "Not enough space on $DEVICE. Needed: $ISOSIZE, Available: $FREESIZE" | tee -a "$LOG"
        exit 10
      fi
      echo "Rsync $ISO to device..." | tee -a "$LOG"
      echo "rsync -a --info=progress2 --modify-window=2 \"$ISO\" \"$MOUNT/\"" | tee -a "$LOG"
      SYNCING=true
      rsync -a --info=progress2 --modify-window=2 "$ISO" "$MOUNT/" |& tee -a "$LOG" &
      
      # Check in the log file if rsync has finished the temporary copy
      while [[ `tail "$LOG" | grep '100%'` == '' ]]; do
        sleep 1
      done

      # Check progress from sync
      wait_until_done $DEVICE & 
      sync
      SYNCING=false
      echo "Rsync finished" | tee -a "$LOG"

      # Add to history file when not already in history file
      if ! grep -q $ISO "$ISOHISTORY"; then
        echo $ISO >> "$ISOHISTORY"
      fi
      GRUB=true
    done
    
    # Configure Grub
    if $GRUB; then
      GRUBDIR="$MOUNT/boot/grub"
      if [ ! -e "$GRUBDIR" ]; then
        echo "You need to install the bootloaders before configuring Grub" | tee -a "$LOG"
        echo "Run usb-creator with the -b option" | tee -a "$LOG"
        exit 9
      fi
      
      # Init grub.cfg
      init_grub $GRUBDIR
        
      # Loop the ISOs
      USBISOS=$(find "$MOUNT" -name "*.iso")
      for ISO in $USBISOS; do
        echo "Create Grub menu for $ISO" | tee -a "$LOG"
        write_grub_menu "$GRUBDIR" "$ISO"
      done
      
      echo "====================== Grub.cfg =====================" | tee -a "$LOG"
      cat "$GRUBDIR/grub.cfg"
      echo "=====================================================" | tee -a "$LOG"
      
      # Copy Grub background image
      IMG="grubbg.png"
      if $SOLYDXK; then
        IMG="grubbg-solydxk.png"
      fi
      cp -vf $FILESDIR/$IMG "$GRUBDIR/grubbg.png" 2>/dev/null | tee -a "$LOG"
    fi
    
    # Check the sha256sum of the given ISOs
    if $SHA256SUM; then
      MISMATCH=''
      
      # If -i is not provided, use the history file
      UPDATEHIST=false
      if [ "$ISOS" == "" ] && [ -f "$ISOHISTORY" ]; then
        UPDATEHIST=true
        while IFS='' read -r ISO || [[ -n "$ISO" ]]; do
          # Trim the line
          ISO=$(trim $ISO)
          if [ "$ISO" != "" ] && [ -f "$ISO" ]; then
            # Including a new line in a bash variable looks really odd...
            ISOS="$ISO
  $ISOS"
          fi
        done < "$ISOHISTORY"
      fi
      if $UPDATEHIST; then
        # Only save existing ISOs in the history file
        echo "$ISOS" > $ISOHISTORY
      fi
      
      # Now check the sha256sum of the ISOs
      for ISO in $ISOS; do
        ISONAME=$(basename "$ISO")
        if [ -f "$ISO" ] && [ -f "$MOUNT/$ISONAME" ]; then
          echo "Check sha256sum of $ISONAME..." | tee -a "$LOG"
          MD5ORG=$(sha256sum "$ISO" | awk '{print $1}')
          MD5TARGET=$(sha256sum "$MOUNT/$ISONAME" | awk '{print $1}')
          if [ "$MD5ORG" != "$MD5TARGET" ]; then
            MISMATCH=$MISMATCH"sha256sum of $ISO does NOT match original. Original: $MD5ORG, Target: $MD5TARGET\n"
          else
            echo "sha256sum of target $ISONAME matches original: $MD5ORG" | tee -a "$LOG"
          fi
        fi
      done
      if [ "$MISMATCH" != "" ]; then
        echo -e "$MISMATCH" | tee -a "$LOG"
        exit 7
      fi
    fi
  fi
 
  # Safely remove the device
  if $UNMOUNT; then
    # Is it in use?
    FUSER=$(fuser -m "$MOUNT")
    if [ "$FUSER" != "" ]; then
      echo "Cannot safely unmount $DEVICE. Unmount the device manually." | tee -a "$LOG"
      exit 5
    else
      udisksctl unmount -b $DEVICE'1' | tee -a "$LOG"
      udisksctl power-off -b $DEVICE | tee -a "$LOG"
      echo "You can now safely remove $DEVICE"
    fi
  fi
fi

exit 0
